"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const express = require("express");
const axios = require("axios");
const app = express();
app.get("/", (req, res) => res.send("Express on Vercel"));
app.get("/get-directions", (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { start, goal, option } = req.query;
    console.log("Query parameters:", { start, goal, option });
    const url = "https://naveropenapi.apigw.ntruss.com/map-direction/v1/driving";
    const headers = {
        "X-NCP-APIGW-API-KEY-ID": process.env.NAVER_CLIENT_ID,
        "X-NCP-APIGW-API-KEY": process.env.NAVER_CLIENT_SECRET,
    };
    console.log("Request URL:", url);
    console.log("Request headers:", headers);
    try {
        const response = yield axios.get(url, {
            params: { start, goal, option },
            headers: headers,
        });
        console.log("Response status:", response.status);
        console.log("Response data: ", response.data);
        // console.log("Response data:", JSON.stringify(response.data, null, 2));
        res.status(200).json(response.data);
    }
    catch (error) {
        console.error("Error:", error.message);
        if (error.response) {
            console.error("Error response:", error.response.data);
        }
        res.status(error.response ? error.response.status : 500).json({
            error: error.message,
            details: error.response ? error.response.data : null,
        });
    }
}));
// For local development
if (process.env.NODE_ENV !== "production") {
    const PORT = process.env.PORT || 0; // This will choose a random available port
    const server = app.listen(PORT, () => console.log(`Server ready on port ${server.address().port}.`));
}
module.exports = app;
